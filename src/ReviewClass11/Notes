Method overriding in java:
   Method overriding happens when we have same method names with same signature(method name
   and its parameter are called signature of a method) in
   a parent class and in a child class.

Benefits:
    1)Flexibility, With the help of method overriding child classes can provide its own implementations for
    methods that are present in the parent class.
    Polymorphism: same method can behave differently depending upon the object we call it.
Rules:
    1) There must be parent child relationship between the classes.
    2) The method that we are trying to override must be present inside the child class with
    same name and parameters.
    3)If something don't participate in inheritance we can can't override it for example
    private methods and fields and constructors
    4)If a method is declared final inside the parent class we can;t override that method
    inside the child class
    5) we can't override the static methods but, we can redeclare them. for example the main
    method.
    6) we can't change the access modifier to be more restrictive.
    7) Method return type should be same
Method Overloading                      vs                            Method overriding:
Method signature should be different                                  Method signature should be same
Return type can be different                                          Return type should be same
we don't care about the access modifiers                              Access modifiers can't be more restrictive
we don't care about the non access modifiers(final static abstract)   we do care about the non access modifiers.
we can overload constructors                                          we can't override constructors
we achieve compile time polymorphism or early binding or static       run time polymorphism or dynamic polymorphism
                                                                      or late binding
PolyMorphism:
PolyMorphism happens when an object behaves different. for example a method behave different when we pass different
parameters or when we call the method using different objects.

final Keyword in Java
final keyword is non access modifier that can help restrict some features of OOPS.
when we use it the class name no other class can inherit from that class.
when we use it method names we can't override those methods inside the child classes.
when we use it with fields we can't change their values in parent or child  class but we can have same name
fields inside the chdil class.
Rules:
1) we can't use final and abstract together
2) Static and final can be used together.
Abstraction in Java:
    is a process through which we hide the implementation details and show only the functionality to the user.
    foe example if we have method that calculates the tax of salaried person the person who wants to calculate his
    tax don't need to understand all the details
Benefits:
    1) Clean code
    2) less complexity
    3) improves the maintainability of code.

We can achieve abstraction in java using Abstract classes and interfaces:
A class declared with abstract keyword is called abstract class.
Rules:
1) As soon as we have a method abstract that class must also be abstract.
2) Abstract methods don't have bodies inside the classes in which the are defined.
3) A method can't be static and abstract at the same time
4) fields can't be abstract
5) methods can't be private and abstract.
6) abstract keyword not allowed with constructors.
7)we can have concrete and abstract methods in an abstract class.
Interfaces in java:
are contracts that define how a method should be called and classes provide the implementation for those
methods
Rules:
    1) All the variables in an interface they are always public static and final
    2) No instance fields and therefore no constructors
    3) Methods in interfaces are always public abstract.
    4) with interfaces we use the implements' keyword
    5) we can have multiple inheritance in interfaces
    6) we can have static methods in interfaces.
    7) interfaces can extend other interfaces.